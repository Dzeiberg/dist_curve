# AUTOGENERATED! DO NOT EDIT! File to edit: 03_get_estimator_model.ipynb (unless otherwise specified).

__all__ = ['getEstimatorModel', 'getTrainedEstimator']

# Cell

import tensorflow as tf
from tensorflow.keras.layers import Input, Dense, Dropout, Activation, ReLU, BatchNormalization
from tensorflow.keras.models import Model, Sequential

# Cell
def getEstimatorModel(intermediateDims=[2048,1024,512], drop_prob=.5):
    model = Sequential([Input(shape=(100,), name='network_input')])
    for i,dim in enumerate(intermediateDims):
        model.add(Dense(dim, kernel_initializer="uniform", name='hiddenLayer{}'.format(i)))
        model.add(BatchNormalization())
        model.add(Activation("relu"))
        model.add(Dropout(drop_prob))
    model.add(Dense(1))

    model.add(ReLU(max_value=1.0, negative_slope=0.0, threshold=0.0))
    return model

# Cell
def getTrainedEstimator(weights_path="/ssdata/ClassPriorEstimation/model.hdf5"):
    model = getEstimatorModel()
    model.load_weights(weights_path)
    return model